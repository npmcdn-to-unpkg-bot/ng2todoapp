import {listType} from './app_interfaces'
export class TodoUtils{
	appRef = new Firebase('https://ng2todoapp.firebaseio.com');
	userRef: Firebase;
	userId: string;
	constructor(userId:string){
		this.userId = userId;
		this.userRef = this.appRef.child('/users/' + userId);
	}
	public populateLists(listsObjVar,type:listType){
		var listMetaRef: Firebase, listsRef: Firebase;
		if(type == listType.private){
			//For private lists
			listMetaRef = this.userRef.child('/privateListsMeta');
			listsRef = this.userRef.child('/privateLists');
		}else if(type == listType.public){
			listMetaRef = this.userRef.child('/publicListsMeta');
			listsRef = this.appRef.child('/public/publicLists');
		}

		var handlerForKey = function(key: String, listsRef:Firebase,listObjVar) {
			return function() { 
				console.log('on val init for ' + key);
				listsRef.child('/' + key).on("value", (tasksSnap) => {
					var taskList = tasksSnap.val();
					console.log('on value called for ' + key, taskList);
				})
			};

		}

		listMetaRef.on("value",(metaSnap)=>{
			var data = metaSnap.val();
			console.log('on value called for [public,private] = '+type);
			if (data) {
				var key: string;
				for (key in data) {
					if (!listsObjVar[key]) {
						listsObjVar[key] = {};
					}
					var intKey: string;
					var tempList = data[key];
					var listObj = listsObjVar[key];
					for(intKey in data[key]){
						listObj[intKey] = tempList[intKey]
					}
					listObj.isActive = false;
					if (!listObj.tasks) listObj.tasks = {};
					//Add a eventListeer to every key if required
					handlerForKey(key, listsRef, listObj)();
				}
			}
		})

	}
	public addTaskList(taskListType:listType,listName:string,listDesc:string){
		var listUrl:string = "";
		var listMetaUrl: string = "";
		if (taskListType == listType.private) {
			listUrl = "/users/" + this.userId + "/privateLists";
			listMetaUrl = "/users/" + this.userId + "/privateListsMeta";
		}else if(taskListType == listType.public){
			listUrl = "/public/publicLists";
			listMetaUrl = "/users/" + this.userId + "/publicListsMeta";
		}
		//Pushing  NoData to taskList
		var taskListRef: Firebase = this.appRef.child(listUrl).push("NoData");
		var taskListId:string = taskListRef.toString();
		taskListId = taskListId.slice(taskListId.lastIndexOf('/') + 1, taskListId.length);

		//Adding the taskListId to taskListIds holder
		var listMeta = {};
		var d: Date = new Date();
		listMeta[taskListId] = { 
			listName: listName,
			listDesc: listDesc,
			addedOn: d.getTime(),
		 	priority: 0,
		 	colorCode:'#333'
		}
		this.appRef.child(listMetaUrl).update(listMeta);

		if (taskListType == listType.public){
			var publicListEntry = {};
			publicListEntry[taskListId] = { listName: listName, listDesc: listDesc }; 
			this.appRef.child("/public/publicListsMeta").update(publicListEntry);

		}
	}
}

/*		Explanation of data store
--------------------------------------------------
# 2 container : users.userID and public
# both have taskList and taskListMeta
# users.userID will have addtional profile and publicList

An Id will be generated by pushing taskList with 'NoData'
This Id will be used to add Meta and publicList


*/